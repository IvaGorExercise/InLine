<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ Assembly Name= "$(SolutionDir)\bin\InLine.Common.dll"#>
<#@ import namespace="InLine.Common" #>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

//string inputFile = @"..\..\InLine.Model.Data\InLineData.edmx";
//string inputFile = VS.SolutionPath() + @"\InLine.Model.Admin\InLineAdmin.edmx";
string inputFile = VS.SolutionPath() + @"\InLine.Model.Data\InLineData.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string NameSpace = "InLine.Service.Data";
string EntityName;
var parametersName = string.Empty;
var parametersType =  string.Empty;

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	parametersName = string.Empty;
	parametersType = string.Empty;

    EntityName = code.Escape(entity);
	if (T4.ClassName(EntityName) != "Audit")
	{
	
	fileManager.StartNewFile(T4.InterfaceNameFull(EntityName) + ".cs");
    BeginNamespace(T4.NameSpace(EntityName,NameSpace), code);
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using InLine;

public partial interface <#=T4.InterfaceName(EntityName)#>
{
<# 
	if (T4.IsView(EntityName) == false)
	{

	foreach (var keyMember in entity.KeyMembers)
	{
		parametersName = parametersName + keyMember.Name.ToString() + "," ;
		parametersType = parametersType + T4.CleanType(keyMember.TypeUsage.ToString().Remove(0,4),true) + " " + keyMember.Name.ToString() + "," ;
	}


	#>
	IList<Model.Admin.StatusPoruka> Insert(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
    IList<Model.Admin.StatusPoruka> Update(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
    IList<Model.Admin.StatusPoruka> Delete(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
	IEnumerable<Model.Data.<#=T4.ClassNameFull(EntityName)#>> SelectResult(<#=parametersType.TrimEnd(',')#>);
	Model.Data.<#=T4.ClassNameFull(EntityName)#> InsertResult(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
	Model.Data.<#=T4.ClassNameFull(EntityName)#> UpdateResult(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
	int DeleteResult(Model.Data.Item.<#=T4.ClassNameFull(EntityName)#>Item item);
	<#
	}
	#>

    Model.Data.<#=T4.ClassNameFull(EntityName)#> FindID(long id);
    //IEnumerable<Model.Data.<#=T4.ClassNameFull(EntityName)#>> GetGridData(string filter, string sort, long? start, long? count, bool customserach = false);
	IEnumerable<Model.Data.<#=T4.ClassNameFull(EntityName)#>> GetGridData(string filter, string key, string value, string sort, long? start, long? count, bool customserach = false);
    long GetCount(string filter, string key, string value, bool customserach = false);
	IEnumerable<Model.Data.<#=T4.ClassNameFull(EntityName)#>> GetData(<#= "List<Model.Data.Field."+T4.ClassNameFull(EntityName)+">"#> fields, <#= "List<Model.Data.Filter."+T4.ClassNameFull(EntityName)+">"#>  filter, <#= "List<Model.Data.Sort."+T4.ClassNameFull(EntityName)+">"#>  sort, long? start = null, long? count = null);
}
<#
    EndNamespace(T4.NameSpace(EntityName,NameSpace));
}
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>


namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>