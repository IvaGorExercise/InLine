<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@output extension=".cs"#>
<#@ Assembly Name= "$(SolutionDir)\bin\InLine.Common.dll"#>
<#@ Assembly Name="System.Data.Linq.dll" #>
<#@ Import Namespace="System.Data" #>
<#@ Import Namespace="System.Data.Linq" #> 
<#@ Import Namespace="System.Linq" #>
<#@ import namespace="InLine.Common" #> 


<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 4);
MetadataTools ef = new MetadataTools(this);

//string inputFile = @"..\..\InLine.Model.Data\InLineData.edmx";
string inputFile = VS.SolutionPath() + @"\InLine.Model.Data\InLineData.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "InLine.UI.Web.T4.GridFormattedTemplate";
string annotationNamespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
string EntityName;
string gridNamespaceName = "InLine.UI.Web.T4.GridFormattedTemplate.";

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);


// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	EntityName = code.Escape(entity);

	if (T4.ClassName(EntityName) != "Audit")
	{

    //fileManager.StartNewFile(entity.Name + "GridFormattedPartial.cs");
	fileManager.StartNewFile(T4.ClassNameFull(EntityName) + "GridFormattedPartial.cs");
	BeginNamespace(T4.NameSpace(EntityName,namespaceName), code);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
	
	
#>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Web;
using System.ComponentModel;
using Lib.Web.Mvc.JQuery.JqGrid.DataAnnotations;
using Lib.Web.Mvc.JQuery.JqGrid;
using System.ComponentModel.DataAnnotations;
using Lib.Web.Mvc.JQuery.JqGrid.Constants;
using System.Web.Mvc;
using InLine;
using InLine.UI.Web.T4.GridFormattedTemplate;
using InLine.UI.Web.Helper;


<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=T4.ClassName(EntityName)#>GridFormattedBase<#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{
	#region Properities
<#
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
        bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);
#>
<# // begin max length attribute
if (code.Escape(edmProperty.TypeUsage) == "string")
{
  int maxLength = 0;
  if (edmProperty.TypeUsage.Facets["MaxLength"].Value != null && Int32.TryParse(edmProperty.TypeUsage.Facets["MaxLength"].Value.ToString(), out maxLength))
  {
#>	
    [StringLength(<#=code.CreateLiteral(maxLength)#>, ErrorMessage = AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.StringLength)]
<#
   }
}
if (code.Escape(edmProperty.TypeUsage).Contains("DateTime"))
	{
#>
	[DataType(DataType.Date)]
	[DisplayFormat(DataFormatString = KeyWord.FormaterRazno.DatumFormat.ddMMyyyy, ApplyFormatInEditMode = true)]
<#
	}
  if ( edmProperty.TypeUsage.Facets["Nullable"].Value.ToString() =="False")
  {
#>
    [Required(ErrorMessage = AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Required)]
<#
   }
   #>
	[DisplayName(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.DisplayName)]
   <# 
if (code.Escape(edmProperty.TypeUsage) == "long")
{
	MetadataProperty storeGeneratedPatternProperty = null;
    edmProperty.MetadataProperties.TryGetValue(annotationNamespace + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty);
	
  if (storeGeneratedPatternProperty != null && storeGeneratedPatternProperty.Value.ToString() == "Identity")
  { #> [ScaffoldColumn(false)]
  <#
   }

   else if (code.Escape(edmProperty.TypeUsage).Contains("long") && code.Escape(edmProperty.Name).Contains("ID_"))
   {
   #> [ScaffoldColumn(false)]
   <#
   }
}
#>
	<#
	if (code.Escape(edmProperty.TypeUsage) == "string")
	{
	#>
[JqGridColumnSearchable(true, SearchType = JqGridColumnSearchTypes.Text, SearchOperators = JqGridSearchOperators.TextOperators)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Left)]
	[JqGridColumnFormatter(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Formatter)]
	<#
	}
	else if (code.Escape(edmProperty.TypeUsage).Contains("long"))
	{
	#>
[JqGridColumnSearchable(false, SearchType = JqGridColumnSearchTypes.Text, SearchOperators = JqGridSearchOperators.Eq)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Right)]
	[JqGridColumnFormatter(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Formatter)]
	<#
	}
	else if (code.Escape(edmProperty.TypeUsage).Contains("decimal"))
	{
	#>
[DisplayFormat(DataFormatString = KeyWord.FormaterRazno.DecimalFormat.TockaZarez, ApplyFormatInEditMode = true)]
	[JqGridColumnSearchable(true, SearchType = JqGridColumnSearchTypes.Text, SearchOperators = JqGridSearchOperators.Eq)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Right)]
	[JqGridColumnFormatter(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Formatter)]
	<#
	}
	else if (code.Escape(edmProperty.TypeUsage).Contains("int"))
	{
	#>
[JqGridColumnSearchable(true, SearchType = JqGridColumnSearchTypes.Text, SearchOperators = JqGridSearchOperators.Eq)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Right)]
	[JqGridColumnFormatter(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Formatter)]
	<#
	}
	else if (code.Escape(edmProperty.TypeUsage).Contains("bool"))
	{
	#>
[JqGridColumnSearchable(false, KeyWord.FilterGridFormat.BoolFilterDaNe, KeyWord.KontrolerFilteriGridFormat.Filter, SearchType = JqGridColumnSearchTypes.Select, SearchOperators = JqGridSearchOperators.Eq | JqGridSearchOperators.Ne)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Center)]
	[JqGridColumnFormatter(JqGridColumnPredefinedFormatters.CheckBox)]
	<#
	}
	else
	{
	#>
 [JqGridColumnSearchable(false)]
	[JqGridColumnLayout(Alignment = JqGridAlignments.Center)]
	[JqGridColumnFormatter(AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Formatter)]
	<#
	}
#>
[JqGridColumnSortable(true, Index = AtributClass.<#=T4.ClassName(EntityName)#>.<#= edmProperty.Name#>.Sortable)]
	<#=(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> { <#
        if (isForeignKey)
        { #><#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get; <#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set;<# }
        else if (isDefaultValueDefinedInModel)
         {#><#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get { return <#=code.FieldName(edmProperty)#>; } <#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set { <#=code.FieldName(edmProperty)#> = value; } <# }
        else
        { #><#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get; <#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set;<# }
#> }

<#     
    }

    foreach(EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity))
    {
#>
    <#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#>
    {
        <#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get { return <#=code.FieldName(edmProperty)#>; }
        <#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set { <#=code.FieldName(edmProperty)#> = value; }
    }
    private <#=code.Escape(edmProperty.TypeUsage)#> <#=code.FieldName(edmProperty)#> = new <#=code.Escape(edmProperty.TypeUsage)#>();
<#
    }
  
#>
	#endregion
	
	
	#region Constructor
	
	public <#=T4.ClassName(EntityName)#>GridFormattedBase()
    { }
	
	public <#=T4.ClassName(EntityName)#>GridFormattedBase(Model.Data.<#=T4.ClassNameFull(EntityName)#> gridformated)
	{
	<#
	foreach(EdmProperty edmProperty in entity.Properties)
    {
	#>
    this.<#=edmProperty #> = gridformated.<#=edmProperty #>;
	<#
    }	
#>
}

	/*
	<#
	foreach(EdmProperty edmProperty in entity.Properties)
    {
	#>
    mymodel.<#=edmProperty #> = model.<#=edmProperty #>;
	<#
    }	
#>
	
	*/

		#endregion
}
<#
    EndNamespace(namespaceName);
}
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
//Split entity name by capitals
void WriteDisplayName(EdmProperty edmProperty) 
{
	string displayName = edmProperty.Name;
	if (!string.IsNullOrEmpty(displayName))
		{displayName = Regex.Replace(displayName,"([A-Z]+)", " $1",RegexOptions.Compiled).Trim();
		string displayAttribute = string.Format("[DisplayName(\"{0}\")]", displayName);
#>
	<#=displayAttribute#>
<#+
	}
}
#>

<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}


bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>

