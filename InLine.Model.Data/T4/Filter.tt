<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ Assembly Name= "$(SolutionDir)\bin\InLine.Common.dll"#>
<#@ import namespace="InLine.Common" #>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\InLineData.edmx";
//string inputFile = VS.SolutionPath() + @"\InLine.Model.Admin\InLineAdmin.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "InLine.Model.Data.Filter";
string ClassNameSpace;
string ClassName;
string ClassNameField;
string ClassBaseType;
string FileName;

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    ClassNameSpace = namespaceName;
	ClassName = code.Escape(entity);
	ClassBaseType = code.Escape(entity.BaseType);
	FileName = ClassName;

	ClassNameField = ClassName;

	if (ClassName.Length > 5)
    {
		if (ClassName.Substring(0,5).ToUpper().Equals("VIEW_"))
		{
			ClassNameSpace += ".View";
			ClassName = ClassName.Substring(5);
			ClassNameField = "View." + ClassName;
			FileName = "View." + ClassName;
		}
    }

	if (ClassName.Length > 4)
    {
		if (ClassName.Substring(0,4).ToUpper().Equals("USP_"))
		{
			ClassNameSpace += ".Procedure";
			ClassName = ClassName.Substring(4);
			ClassNameField = "Procedure." + ClassName;
			FileName = "Procedure." + ClassName;
		}
    }

	if (ClassName.Length > 4)
    {
		if (ClassName.Substring(0,4).ToUpper().Equals("FNS_"))
		{
			ClassNameSpace += ".Function";
			ClassName = ClassName.Substring(4);
			ClassNameField = "Function." + ClassName;
			FileName = "Function." + ClassName;
		}
    }
	
	FileName += ".Filter";

	fileManager.StartNewFile(FileName + ".cs");
    BeginNamespace(ClassNameSpace, code);
#>
using InLine;

public class <#=ClassName#>
{
    public <#=ClassName#>()
    {
        this.Operator = ERelationalOperator.Equal;
    }

    public <#=ClassName#>(Model.Data.Field.<#=ClassNameField#> field, dynamic value, ERelationalOperator operator_ = ERelationalOperator.Equal, bool tip_ = false)
    {
        this.Field = field;
        this.Value = value;
        this.Operator = operator_;
		this.Tip = tip_;
    }

    public Model.Data.Field.<#=ClassNameField#> Field { get; set; }
    public dynamic Value { get; set; }
    public ERelationalOperator Operator { get; set; }
	public bool Tip { get; set; }
}
<#
    EndNamespace(ClassNameSpace);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    string accessibility = Accessibility.ForProperty(edmProperty);
	string type = code.Escape(edmProperty.TypeUsage);
	bool nullableType = code.Escape(edmProperty.TypeUsage).Contains("Nullable<");
	string name = code.Escape(edmProperty);
	string getterAccessibility = code.SpaceAfter(Accessibility.ForGetter(edmProperty));
	string setterAccessibility = code.SpaceAfter(Accessibility.ForSetter(edmProperty));
	string declaringType = code.Escape(edmProperty.DeclaringType);

	type = T4.CleanType(type);

	if (name == "ID_" + declaringType) WritePropertyID(accessibility, type, name, getterAccessibility, setterAccessibility);

	WriteProperty(accessibility, type, name, getterAccessibility, setterAccessibility);
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

void WritePropertyID(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> ID
	{
		<#=getterAccessibility#>get { return this.<#=name#>; }
		<#=setterAccessibility#>set { this.<#=name#> = value; }
	}
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>