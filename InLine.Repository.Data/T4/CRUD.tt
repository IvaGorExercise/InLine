<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ Assembly Name= "$(SolutionDir)\bin\InLine.Common.dll"#>
<#@ import namespace="InLine.Common" #>
<#@ output extension=".cs"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 4);
MetadataTools ef = new MetadataTools(this);


string inputFile = @"..\..\InLine.Model.Data\InLineData.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string NameSpace = "InLine.Repository.Data.CRUD";
string EntityName;
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
var storeCRUD = container.FunctionImports;

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);


foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	EntityName = code.Escape(entity);

	if (T4.ClassName(EntityName) != "Audit")
	{

	fileManager.StartNewFile(T4.ClassNameFull(EntityName) + ".cs");
    BeginNamespace(T4.NameSpace(EntityName,NameSpace), code);
	
	string itemType;
	string retType;

	itemType = "Model.Data.Item." + entity.Name;
	retType = "Model.Data." + entity.Name;
	
			
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Data.Objects;
using InLine;

<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=T4.ClassName(EntityName)#>
{
	#region Fields
    
	public Model.Data.Context _context;
    
	#endregion



    #region Constructors
    
	public <#=T4.ClassName(EntityName)#>(string connstring)
    {
        _context = new Model.Data.Context(connstring);
    }
    
	#endregion


	#region Methods
   <#
			foreach (var edmFunction in container.FunctionImports)
			{

				var namestore = edmFunction.ToString();
				int prvi = namestore.IndexOf("_")+1;
				int zadnji = namestore.LastIndexOf("_");
				string ime = namestore.Substring(prvi,(zadnji-prvi));
		
				string type;
				var parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
    			var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.EsqlParameterName).ToArray());
				var paramListName = String.Join(", ", parameters.Select(p => p.EsqlParameterName).ToArray());
				var paramListItem = "item." + String.Join(", item.", parameters.Select(p => p.EsqlParameterName).ToArray());
    			var returnType = edmFunction.ReturnParameter == null ? null : ef.GetElementType(edmFunction.ReturnParameter.TypeUsage);


				if (returnType != null)
				{
					type = T4.CleanType(code.Escape(returnType));
				}

				else
				{
					type = "long";
				}
			
	
				if (!T4.BasicType(type))
				{
					type = "Model.Data." + type;
				}

				var processedReturn = returnType == null ? "long" : "ObjectResult<" + type + ">";
		
if (entity.Name == ime )
{		
	if (namestore.Contains("DELETE"))
	{	  
		#>		
			public void Delete(<#=itemType#>Item item)
			{
				_context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}

		<#
	}

	else if (namestore.Contains("INSERT"))
	{
			
		#>
	public void Insert(<#=itemType#>Item item)
			{
				_context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}

		<#
	}

	else if (namestore.Contains("UPDATE"))
	{
			   
		#>		
			public void Update(<#=itemType#>Item item)
			{
				_context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}

		<#
	}

	else if (namestore.Contains("SELECT"))
	{
			   
		#>		
			public void Select(<#=paramList#>)
			{
				_context.<#=code.Escape(edmFunction)#>(<#=paramListName#>);
			}

		<#
	}


if (processedReturn.ToString().Contains("ObjectResult"))
	{	
		if (namestore.Contains("DELETE"))
		{	  
			  
		#>		
			public <#=processedReturn#> DeleteResult(<#=itemType#>Item item)
			{
				return _context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}	
									
		<#
		}

		else if (namestore.Contains("INSERT"))
		{
			
		#>
	public <#=processedReturn#> InsertResult(<#=itemType#>Item item)
			{
				return _context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}	
									
		<#
		}

		else if (namestore.Contains("UPDATE"))
		{
			   
		#>			
			public <#=processedReturn#> UpdateResult(<#=itemType#>Item item)
			{
				return _context.<#=code.Escape(edmFunction)#>(<#=paramListItem#>);
			}
										
		<#
		}


		else if (namestore.Contains("SELECT"))
		   {
		#>
			
			public <#=processedReturn#> SelectResult(<#=paramList#>)
        	{
            	return _context.<#=code.Escape(edmFunction)#>(<#=paramListName#>);
        	}			
		<#
		   }

	}

	}

}
#>

#endregion
	
}

<#
		  EndNamespace(T4.NameSpace(EntityName,NameSpace));		
		}

} 


if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();
#>

<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------


<#+
    fileManager.EndBlock();
}

void BeginNamespace(string NameSpace, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(NameSpace))
    {
#>
namespace <#=code.EscapeNamespace(NameSpace)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string NameSpace)
{
    if (!String.IsNullOrEmpty(NameSpace))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}


bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
	
#>